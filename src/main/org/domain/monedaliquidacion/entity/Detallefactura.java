package org.domain.monedaliquidacion.entity;

// Generated 9/06/2015 03:23:02 PM by Hibernate Tools 3.2.4.GA

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import org.hibernate.validator.NotNull;

/**
 * Detallefactura generated by hbm2java
 */
@Entity
@Table(name = "detallefactura")
public class Detallefactura implements java.io.Serializable {

	private DetallefacturaId id;
	private Inventario inventario;
	private Factura factura;
	private Short cantidad;
	private Long valor;

	public Detallefactura() {
	}

	public Detallefactura(DetallefacturaId id, Inventario inventario,
			Factura factura) {
		this.id = id;
		this.inventario = inventario;
		this.factura = factura;
	}

	public Detallefactura(DetallefacturaId id, Inventario inventario,
			Factura factura, Short cantidad, Long valor) {
		this.id = id;
		this.inventario = inventario;
		this.factura = factura;
		this.cantidad = cantidad;
		this.valor = valor;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "numfactura", column = @Column(name = "numfactura", nullable = false, length = 10)),
			@AttributeOverride(name = "refproducto", column = @Column(name = "refproducto", nullable = false, length = 20)),
			@AttributeOverride(name = "codigounico", column = @Column(name = "codigounico", nullable = false, length = 8)) })
	@NotNull
	public DetallefacturaId getId() {
		return this.id;
	}

	public void setId(DetallefacturaId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "refproducto", referencedColumnName = "refproducto", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "codigounico", referencedColumnName = "codigounico", nullable = false, insertable = false, updatable = false) })
	@NotNull
	public Inventario getInventario() {
		return this.inventario;
	}

	public void setInventario(Inventario inventario) {
		this.inventario = inventario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "numfactura", referencedColumnName = "numfactura", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "codigounico", referencedColumnName = "codigounico", nullable = false, insertable = false, updatable = false) })
	@NotNull
	public Factura getFactura() {
		return this.factura;
	}

	public void setFactura(Factura factura) {
		this.factura = factura;
	}

	@Column(name = "cantidad", precision = 4, scale = 0)
	public Short getCantidad() {
		return this.cantidad;
	}

	public void setCantidad(Short cantidad) {
		this.cantidad = cantidad;
	}

	@Column(name = "valor", precision = 10, scale = 0)
	public Long getValor() {
		return this.valor;
	}

	public void setValor(Long valor) {
		this.valor = valor;
	}

}
